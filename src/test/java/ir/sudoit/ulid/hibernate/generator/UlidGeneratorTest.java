package ir.sudoit.ulid.hibernate.generator;

import ir.sudoit.ulid.ULID;
import jakarta.persistence.Id;
import org.hibernate.HibernateException;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;

class UlidGeneratorTest {


    @Test
    void testGenerateWithIdField() {
        UlidGenerator generator = new UlidGenerator();
        SharedSessionContractImplementor session = mock(SharedSessionContractImplementor.class);
        Object generatedValue = generator.generate(session, new MockEntity());
        assertNotNull(generatedValue, "Generated value should not be null");
        assertInstanceOf(ULID.class, generatedValue, "Generated value should be an instance of ULID");
    }

    @Test
    void testGenerateWithIdFieldInParentClass() {
        UlidGenerator generator = new UlidGenerator();
        SharedSessionContractImplementor session = mock(SharedSessionContractImplementor.class);
        Object generatedValue = generator.generate(session, new MockEntityChild());
        assertNotNull(generatedValue, "Generated value should not be null");
        assertInstanceOf(ULID.class, generatedValue, "Generated value should be an instance of ULID");
    }

    @Test
    void testGenerateWithIdFieldInParentClassHierarchy() {
        UlidGenerator generator = new UlidGenerator();
        SharedSessionContractImplementor session = mock(SharedSessionContractImplementor.class);
        Object generatedValue = generator.generate(session, new MockEntityChild());
        assertNotNull(generatedValue, "Generated value should not be null");
        assertInstanceOf(ULID.class, generatedValue, "Generated value should be an instance of ULID");
    }

    @Test
    void testGenerateWithStringIdField() {
        UlidGenerator generator = new UlidGenerator();
        SharedSessionContractImplementor session = mock(SharedSessionContractImplementor.class);
        Object generatedValue = generator.generate(session, new MockEntityStringId());
        assertNotNull(generatedValue, "Generated value should not be null");
        assertInstanceOf(String.class, generatedValue, "Generated value should be an instance of String");
    }

    @Test
    void testGenerateWithByteIdField() {
        UlidGenerator generator = new UlidGenerator();
        SharedSessionContractImplementor session = mock(SharedSessionContractImplementor.class);
        Object generatedValue = generator.generate(session, new MockEntityByteId());
        assertNotNull(generatedValue, "Generated value should not be null");
        assertInstanceOf(byte[].class, generatedValue, "Generated value should be an instance of byte[]");
    }

    @Test
    void testGenerateWithoutIdField() {
        UlidGenerator generator = new UlidGenerator();
        SharedSessionContractImplementor session = mock(SharedSessionContractImplementor.class);
        assertThrows(HibernateException.class, () -> generator.generate(session, new MockEntityNoId()));
    }

    @Test
    void testGenerateWithUnsupportedIdField() {
        UlidGenerator generator = new UlidGenerator();
        SharedSessionContractImplementor session = mock(SharedSessionContractImplementor.class);
        assertThrows(IllegalArgumentException.class, () -> generator.generate(session, new MockEntityUnsupportedTypeIdField()));
    }

    @Test
    void testGenerateValue() {
        UlidGenerator generator = new UlidGenerator();

        Object ulidValue = generator.generateValue(ULID.class);
        assertNotNull(ulidValue, "Generated ULID value should not be null");
        assertInstanceOf(ULID.class, ulidValue, "Generated value should be an instance of ULID");

        Object stringValue = generator.generateValue(String.class);
        assertNotNull(stringValue, "Generated String value should not be null");
        assertInstanceOf(String.class, stringValue, "Generated value should be an instance of String");

        Object bytesValue = generator.generateValue(byte[].class);
        assertNotNull(bytesValue, "Generated byte[] value should not be null");
        assertInstanceOf(byte[].class, bytesValue, "Generated value should be an instance of byte[]");

        assertThrows(IllegalArgumentException.class, () -> generator.generateValue(Integer.class));
    }

    public static class MockEntity {
        @Id
        private ULID id;
    }


    public static class MockEntityStringId {
        @Id
        private String id;
    }

    public static class MockEntityByteId {
        @Id
        private byte[] id;
    }

    public static class MockEntityNoId {
        private String someField;
    }

    public static class MockEntityChild extends MockEntity {
        private String someField;
    }

    public static class MockEntityChild2 extends MockEntityChild {
        private String someField2;
    }

    public static class MockEntityUnsupportedTypeIdField {
        @Id
        private Long id;
    }
}